{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "diagnosticsStorageAccount": {
      "type": "string",
      "metadata": {
        "description": "Name of Boot Diagnostics Storage Account"
      }
    },
    "bastionhostNeeded": {
      "type": "string",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Name of BastionHost"
      }
    },
    "bastionhostName": {
      "type": "string",
      "defaultValue": "optional",
      "metadata": {
        "description": "Name of BastionHost if not existent"
      }
    },
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "Name of the VM"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_B1ms",
      "metadata": {
        "description": "Size of the VM"
      }
    },
    "imagePublisher": {
      "type": "string",
      "defaultValue": "Canonical",
      "metadata": {
        "description": "Image Publisher"
      }
    },
    "imageOffer": {
      "type": "string",
      "defaultValue": "UbuntuServer",
      "metadata": {
        "description": "Image Offer"
      }
    },
    "imageSKU": {
      "type": "string",
      "defaultValue": "18.04-LTS",
      "allowedValues": [
        "12.04.5-LTS",
        "14.04.5-LTS",
        "16.04-LTS",
        "18.04-LTS"
      ],
      "metadata": {
        "description": "Image SKU"
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "VM Admin Username"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "VNET Name"
      }
    },
    "virtualNetworkResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Resource Group VNET is deployed in"
      }
    },
    "vmSubnetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the vm subnet inside the VNET"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "sshPublicKey",
      "allowedValues": [
        "sshPublicKey",
        "password"
      ],
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
      }
    },
    "adminPasswordOrKey": {
      "type": "securestring",
      "metadata": {
        "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
      }
    },
    "adoAccountURL": {
      "type": "string",
      "metadata": {
        "description": "Azure DevOps Account URL (e.g. https://myaccount.visualstudio.com)"
      }
    },
    "adoPAT": {
      "type": "string",
      "metadata": {
        "description": "Azure DevOps PAT for user with build permissions"
      }
    },
    "adoPoolName": {
      "type": "string",
      "defaultValue": "default",
      "metadata": {
        "description": "Azure DevOps Agent Pool Name"
      }
    },
    "adoAgentName": {
      "type": "string",
      "defaultValue": "ubuntu-build-full",
      "metadata": {
        "description": "Azure DevOps Agent Name"
      }
    },
    "numAgents": {
      "type": "int",
      "metadata": {
        "description": "Number of ADO agents to deploy"
      }
    }
  },
  "variables": {
    "vnetID": "[resourceId(parameters('virtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
    "vmSubnetRef": "[concat(variables('vnetID'),'/subnets/', parameters('vmSubnetName'))]",
    "bhSubnetRef": "[concat(variables('vnetID'),'/subnets/AzureBastionSubnet')]",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
            "keyData": "[parameters('adminPasswordOrKey')]"
          }
        ]
      }
    }
  },
  "resources": [
    {
      "condition": "[equals(parameters('bastionhostNeeded'),'yes')]",
      "name": "[concat(parameters('bastionhostName'),'-pip')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-04-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "publicIPAddressVersion": "IPv4"
      }
    },
    {
      "condition": "[equals(parameters('bastionhostNeeded'),'yes')]",
      "name": "[parameters('bastionhostName')]",
      "type": "Microsoft.Network/bastionHosts",
      "apiVersion": "2019-11-01",
      "location": "[parameters('location')]",
      "tags": {
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses',concat(parameters('bastionhostName'),'-pip'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "properties": {
              "subnet": {
                "id": "[variables('bhSubnetRef')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(parameters('bastionhostName'),'-pip'))]"
              },
              "privateIPAllocationMethod": "Dynamic"
            },
            "name": "[concat(parameters('bastionhostName'),'-ipconfig01')]"
          }
        ]
      }
    },
    {
      "name": "[concat(parameters('vmName'),copyIndex(1),'-nic')]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-04-01",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('vmSubnetRef')]"
              }
            }
          }
        ]
      },
      "copy": {
        "name": "niccopy",
        "count": "[parameters('numAgents')]"
      }
    },
    {
      "name": "[concat(parameters('vmName'),copyIndex(1))]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', parameters('vmName'),copyIndex(1),'-nic')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(parameters('vmName'),copyIndex(1))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('imagePublisher')]",
            "offer": "[parameters('imageOffer')]",
            "sku": "[parameters('imageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(parameters('vmName'),copyIndex(1),'_OSDisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'),copyIndex(1),'-nic'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('http://',parameters('diagnosticsStorageAccount'),'.blob.core.windows.net')]"
          }
        }
      },
      "copy": {
        "name": "vmcopy",
        "count": "[parameters('numAgents')]"
      }
    },
    {
      "name": "[concat(parameters('vmName'),copyIndex(1),'/networkwatcher')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2019-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'),copyIndex(1))]"
      ],
      "tags": {
      },
      "properties": {
        "publisher": "Microsoft.Azure.NetworkWatcher",
        "type": "NetworkWatcherAgentLinux",
        "typeHandlerVersion": "1.4",
        "autoUpgradeMinorVersion": true
      },
      "copy": {
        "name": "extensionnwcopy",
        "count": "[parameters('numAgents')]"
      }
    },
    {
      "name": "[concat(parameters('vmName'),copyIndex(1),'/ado-agent-setup')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2019-12-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'),copyIndex(1))]",
        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'),copyIndex(1),'/extensions/networkwatcher')]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.1",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "https://raw.githubusercontent.com/sviera91/ADO-Agents/master/scripts/linux-agent-setup.sh"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat('sh linux-agent-setup.sh',' ',parameters('adoAccountURL'),' ',parameters('adoPAT'),' \"',parameters('adoPoolName'),'\" ',parameters('adoAgentName'),copyIndex(1),' ',parameters('adminUsername'))]"
        }
      },
      "copy": {
        "name": "extensioncopy",
        "count": "[parameters('numAgents')]"
      }
    }
  ]
}